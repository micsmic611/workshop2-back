import React, { useEffect, useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  TextField,
  DialogActions,
  Button,
} from '@mui/material';
import {jwtDecode} from 'jwt-decode';

const Rent = ({ open, onClose, warehouse }) => {
  const [rentalData, setRentalData] = useState({
    warehouseid: warehouse ? warehouse.warehouseid : '',
    warehousename: warehouse ? warehouse.warehousename : '',
    warehouseaddress: warehouse ? warehouse.warehouseaddress : '',
    warehousesize: warehouse ? warehouse.warehousesize : '',
    description: '',
    rentalStartDate: '',
    rentalEndDate: '',
    companyId: '',
  });

  const [companies, setCompanies] = useState([]);

  useEffect(() => {
    const fetchCompanies = async () => {
      try {
        const response = await fetch('https://localhost:7111/api/Company/GetAllCompany');
        const data = await response.json();
        if (data.responseCode === '200') {
          setCompanies(data.data);
        } else {
          console.error('Error fetching companies:', data.responseMessage);
        }
      } catch (error) {
        console.error('Error fetching companies:', error);
      }
    };

    fetchCompanies();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setRentalData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleRent = async () => {
    const token = localStorage.getItem('token'); // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å local storage
    const decodedToken = jwtDecode(token); // ‡πÉ‡∏ä‡πâ jwtDecode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ token
    const userId = decodedToken.userId; // ‡∏î‡∏∂‡∏á userId

    const rentalPayload = {
      warehouseId: rentalData.warehouseid, // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô warehouseId
      userId: userId, // userId ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å token
      rentalStart: rentalData.rentalStartDate, // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô rentalStart
      rentalFinish: rentalData.rentalEndDate, // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô rentalFinish
      companyId: rentalData.companyId, // companyId ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown
      description: rentalData.description, // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤
      rentalstatus: 'inactive' // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤
    };
    

    try {
      const response = await fetch('https://localhost:7111/api/Rental/RentalWarehouse', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(rentalPayload), // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
        onClose(); // ‡∏õ‡∏¥‡∏î popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
      } else {
        const errorData = await response.json();
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤:', errorData);
      }
    } catch (error) {
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} className="rent-popup">
      <DialogTitle>üì¶ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÇ‡∏Å‡∏î‡∏±‡∏á</DialogTitle>
      <DialogContent>
        <div className="popup-content">
          <TextField
            label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πà‡∏≤"
            type="date"
            name="rentalStartDate"
            value={rentalData.rentalStartDate}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤"
            type="date"
            name="rentalEndDate"
            value={rentalData.rentalEndDate}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            name="description"
            label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
            value={rentalData.description}
            onChange={handleChange}
            fullWidth
            margin="normal"
          />
          <TextField
            select
            name="companyId"
            label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
            value={rentalData.companyId}
            onChange={handleChange}
            fullWidth
            margin="normal"
            SelectProps={{
              native: true,
            }}
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</option>
            {companies.map((company) => (
              <option key={company.company_id} value={company.company_id}>
                {company.company_name}
              </option>
            ))}
          </TextField>
        </div>
      </DialogContent>
      <DialogActions>
        <Button variant="contained" color="primary" onClick={handleRent}>
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤
        </Button>
        <Button variant="outlined" color="secondary" onClick={onClose}>
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default Rent;
